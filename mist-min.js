window.mist={},mist.equalsObj=function(t,e){if(null===t&&null===e)return!0;if(null===t||null===e)return!1;if("object"==typeof t&&"object"==typeof e){if(t===e)return!0;if(Array.isArray(t)&&Array.isArray(e)){if(t.length!==e.length)return!1;if(t.every((t=>null===t||"object"!=typeof t))&&e.every((t=>null===t||"object"!=typeof t)))return t.length===e.length&&[...new Set(t)].sort().toString()===[...new Set(e)].sort().toString();for(let n=0;n<t.length;n++)if(!mist.equalsObj(t[n],e[n]))return!1;return!0}let n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(let o of r){if(!n.includes(o))return!1;if(!mist.equalsObj(t[o],e[o]))return!1}return!0}return t===e},mist.cloneObj=function(t){if(null==t||"object"!=typeof t)return t;if(Array.isArray(t))return t.map((t=>mist.cloneObj(t)));if(t instanceof Date)return new Date(t);if(t instanceof RegExp)return new RegExp(t);if(t instanceof Set)return new Set([...t].map((t=>mist.cloneObj(t))));if(t instanceof Map)return new Map([...t].map((([t,e])=>[mist.cloneObj(t),mist.cloneObj(e)])));const e={};for(let n in t)t.hasOwnProperty(n)&&(e[n]=mist.cloneObj(t[n]));return e},mist.mergeObj=function(t,e){if(null==t||"object"!=typeof t)return mist.cloneObj(e);if(null==e||"object"!=typeof e)return mist.cloneObj(t);const n=mist.cloneObj(t);for(let r in e)e.hasOwnProperty(r)&&(null===t[r]||null===e[r]||"object"!=typeof t[r]||"object"!=typeof e[r]||Array.isArray(t[r])||Array.isArray(e[r])?n[r]=mist.cloneObj(e[r]):n[r]=mist.mergeObj(t[r],e[r]));return n},mist.stringify=function(t){if(null==t)return String(t);if("object"==typeof t)try{return JSON.stringify(t)}catch(t){return console.error("Stringify error:",t),"[Object conversion error]"}return String(t)},mist.parse=function(t){if(null==t||"object"==typeof t)return t;if("string"==typeof t){const e=t.trim();if("{"===e[0]&&"}"===e[e.length-1]||"["===e[0]&&"]"===e[e.length-1])try{return JSON.parse(e.replaceAll("\n","\\n"))}catch(e){return console.error("Parse error:",e),t}}return t},mist.flipObj=function(t){if(!t||"object"!=typeof t||Array.isArray(t))return{};const e={};try{for(let n in t)t.hasOwnProperty(n)&&(e[String(t[n])]=n)}catch(t){console.error("Error flipping object:",t)}return e},mist.isPrimeNum=function(t){if("number"!=typeof t||isNaN(t)||!isFinite(t))return!1;if((t=Math.abs(t))<=1)return!1;if(t<=3)return!0;if(t%2==0||t%3==0)return!1;const e=Math.sqrt(t);for(let n=5;n<=e;n+=6)if(t%n==0||t%(n+2)==0)return!1;return!0},mist.setCookie=function(t,e,n=30){if(!t||"string"!=typeof t)return console.error("Cookie name must be a non-empty string"),!1;try{const r=new Date;return r.setTime(r.getTime()+24*n*60*60*1e3),document.cookie=encodeURIComponent(t)+"="+encodeURIComponent(e)+";expires="+r.toUTCString()+";path=/;SameSite=Lax",!0}catch(t){return console.error("Error setting cookie:",t),!1}},mist.getCookie=function(t){if(!t||"string"!=typeof t)return"";try{const e=encodeURIComponent(t)+"=",n=document.cookie.split(";");for(let t=0;t<n.length;t++){let r=n[t].trim();if(0===r.indexOf(e))return decodeURIComponent(r.substring(e.length))}return""}catch(t){return console.error("Error getting cookie:",t),""}},mist.isEmpty=function(t){return null==t||("string"==typeof t?0===t.trim().length:"object"==typeof t&&(Array.isArray(t)?0===t.length:t instanceof Set||t instanceof Map?0===t.size:0===Object.keys(t).length))},mist.size=function(t){return null==t?0:"string"==typeof t||Array.isArray(t)?t.length:t instanceof Set||t instanceof Map?t.size:"object"==typeof t?Object.keys(t).length:0},mist.getPath=function(t,e,n){if(!t||!e)return n;try{const r=e.replace(/\[(\w+)\]/g,".$1").split(".");let o=t;for(const t of r){if(null==o||"object"!=typeof o)return n;o=o[t]}return void 0===o?n:o}catch(t){return n}},mist.setPath=function(t,e,n){if(!t||"object"!=typeof t||!e)return t;try{const r=mist.cloneObj(t),o=e.replace(/\[(\w+)\]/g,".$1").split(".");let i=r;for(let t=0;t<o.length-1;t++){const e=o[t];i[e]&&"object"==typeof i[e]||(i[e]=/^\d+$/.test(o[t+1])?[]:{}),i=i[e]}return i[o[o.length-1]]=n,r}catch(e){return t}},mist.diff=function(t,e){if(t===e)return{};if(null===t||null===e||"object"!=typeof t||"object"!=typeof e)return{old:t,new:e};const n={};for(const r in t)if(t.hasOwnProperty(r))if(e.hasOwnProperty(r))if("object"==typeof t[r]&&"object"==typeof e[r]&&null!==t[r]&&null!==e[r]){const o=mist.diff(t[r],e[r]);mist.isEmpty(o)||(n[r]=o)}else mist.equalsObj(t[r],e[r])||(n[r]={old:t[r],new:e[r]});else n[r]={old:t[r],new:void 0};for(const r in e)e.hasOwnProperty(r)&&!t.hasOwnProperty(r)&&(n[r]={old:void 0,new:e[r]});return n},mist.flatten=function(t,e=""){const n={};if(null==t||"object"!=typeof t)return n;for(const r in t){if(!t.hasOwnProperty(r))continue;const o=e?`${e}.${r}`:r;"object"!=typeof t[r]||null===t[r]||Array.isArray(t[r])?n[o]=t[r]:Object.assign(n,mist.flatten(t[r],o))}return n},mist.unflatten=function(t){const e={};for(const n in t){if(!t.hasOwnProperty(n))continue;const r=n.split(".");let o=e;for(let t=0;t<r.length-1;t++){const e=r[t];o[e]=o[e]||{},o=o[e]}o[r[r.length-1]]=t[n]}return e},mist.pick=function(t,e){if(!t||"object"!=typeof t)return{};const n={},r=Array.isArray(e)?e:[e];for(const e of r)t.hasOwnProperty(e)&&(n[e]=t[e]);return n},mist.omit=function(t,e){if(!t||"object"!=typeof t)return{};const n=mist.cloneObj(t),r=Array.isArray(e)?e:[e];for(const t of r)delete n[t];return n},mist.safeGet=function(t,...e){if(t)for(const n of e){const e=mist.getPath(t,n);if(void 0!==e)return e}},mist.arraysEqual=function(t,e){return!(!Array.isArray(t)||!Array.isArray(e))&&(t===e||t.length===e.length&&(t.every((t=>null===t||"object"!=typeof t))&&e.every((t=>null===t||"object"!=typeof t))?t.length===new Set(t).size&&e.length===new Set(e).size?new Set(t).size===new Set(e).size&&[...new Set(t)].every((t=>new Set(e).has(t))):t.every(((t,n)=>t===e[n])):t.every(((t,n)=>mist.equalsObj(t,e[n])))))},mist.deepFreeze=function(t){return null==t||"object"!=typeof t||Object.isFrozen(t)?t:(Object.getOwnPropertyNames(t).forEach((e=>{const n=t[e];n&&"object"==typeof n&&mist.deepFreeze(n)})),Object.freeze(t))},mist.toQueryString=function(t){return t&&"object"==typeof t?Object.entries(t).filter((([t,e])=>null!=e)).map((([t,e])=>Array.isArray(e)?e.map((e=>`${encodeURIComponent(t)}=${encodeURIComponent(e)}`)).join("&"):`${encodeURIComponent(t)}=${encodeURIComponent(e)}`)).join("&"):""},mist.parseQueryString=function(t){const e={};if(!t||"string"!=typeof t)return e;const n=(t.startsWith("?")?t.substring(1):t).split("&");for(const t of n){if(!t)continue;const[n,r]=t.split("=").map(decodeURIComponent);e[n]?e[n]=Array.isArray(e[n])?[...e[n],r]:[e[n],r]:e[n]=r}return e};